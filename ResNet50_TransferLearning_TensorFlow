# Buliding a ReNet50 Transfer learning model using TensorFlow library for Multi-class image classification. 
# This model is developed to predict 100 multiclass groups with very low data, each group having 10 or less images

#Import Libraries and Packages
import tensorflow as tf
import pandas as pd
from PIL import Image
from keras.utils.np_utils import to_categorical

import tensorflow_datasets as tfds
from tensorflow.keras.applications.resnet50 import ResNet50
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.resnet50 import preprocess_input, decode_predictions
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.optimizers import Adam

import pathlib
from pathlib import Path
import os
import glob
import numpy as np

rom tensorflow import keras
from tensorflow.keras.preprocessing import image_dataset_from_directory
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# SetUP Data_Path
train_path ='C:\Users\Guhan Kumaran\OneDrive - University of Pittsburgh\Desktop\Intern\data\train'
test_path = 'C:\Users\Guhan Kumaran\OneDrive - University of Pittsburgh\Desktop\Intern\data\val'

#Image_data_tranformation, rescaling, resizing, decided to keep the size at 150 for efficiency
train_datagen = ImageDataGenerator(rescale=1./255)
test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(train_path, target_size=(150, 150), 
                                                    batch_size=4,class_mode='categorical')
Validation_generator = train_datagen.flow_from_directory(test_path, target_size=(150, 150), 
                                                    batch_size=1,class_mode='categorical')

# Training Image data set loading from multiple subfolders

training_set = image_dataset_from_directory(train_path,
                                             shuffle=True,
                                             batch_size=4,
                                             image_size=(150, 150))
                                             
#Extraction of class names from folders
class_names = training_set.class_names

# #Validation Image data set loading from multiple subfolders

Validation_set = image_dataset_from_directory(test_path,
                                             shuffle=True,
                                             batch_size=4,
    #Matplotlib image show methods for image view of training

for images, labels in training_set.take(1):
    plt.figure(figsize=(12, 12))
    
    for i in range(4):
        ax = plt.subplot(3, 4, i + 1)
        plt.imshow(images[i].numpy().astype("int32"))
        plt.title(class_names[labels[i]])
        plt.axis("off")                                         image_size=(150, 150))

# #Matplotlib image show methods for image view of training

for images, labels in Validation_set.take(1):
    plt.figure(figsize=(12, 12))
    for i in range(4):
        ax = plt.subplot(3, 4, i + 1)
        plt.imshow(images[i].numpy().astype("int32"))
        plt.title(class_names[labels[i]])
        plt.axis("off")
        
#Training_using_resnet_model

resnet_model = Sequential()


pretrained_model = tf.keras.applications.ResNet50(include_top=False, input_shape = (150, 150, 3),
                                          pooling = 'avg', classes = 100, weights = 'imagenet')
    
for layer in pretrained_model.layers:
        layer.trainable = False
        
resnet_model.add(pretrained_model)
resnet_model.add(Flatten())
resnet_model.add(Dense(512, activation='relu'))
resnet_model.add(Dense(100, activation='softmax'))

# resnet_model.summary()
#Total params: 24,688,100
#Trainable params: 1,100,388
#Non-trainable params: 23,587,712

# Download Resnet50 Model
model = ResNet50(weights='imagenet')

# Model setup
resnet_model.compile(optimizer=Adam(lr=0.001), loss = 'categorical_crossentropy', metrics = ['accuracy'])

# Run Model

epochs=10
history = resnet_model.fit(train_generator,  validation_data = Validation_generator, epochs = epochs )

#Results

     
