#Using Pytorch library for preparing, loading, and modelling multi-image class: Provides multiple codes for data preparation, checking, and building basic CNN model
from __future__ import print_function, division
import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.optim import Adam
import numpy as np
import torchvision
from torchvision import datasets, models, transforms
import glob
from torch.autograd import Variable
import matplotlib.pyplot as plt

plt.ion()   # interactive mode
# #Setting_Inuput_data_Path
train_path ='C:\Users\Guhan Kumaran\OneDrive - University of Pittsburgh\Desktop\Image\data\train' (Provide full path or relative path to training data)
test_path = 'C:\Users\Guhan Kumaran\OneDrive - University of Pittsburgh\Desktop\Image\data\val'  (Provide full path or relative path to validation data)
#Choosing CPU or GPU
device=torch.device('cuda' if torch.cuda.is_available() else 'cpu')

#creating_Pytorch_datagenrators_and_data_Trasfromation_1

transform_train = transforms.Compose([
                                      transforms.RandomResizedCrop(150),
                                      transforms.ToTensor(),
                                      transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
                                      ])
transform_test = transforms.Compose([
                                    transforms.RandomResizedCrop(150),
                                   transforms.ToTensor(),
                                   transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
                                  ])

batch_size=4

#Loding_Training_data_of_100_classes
trainset = torchvision.datasets.ImageFolder("train", transform = transform_train)
trainloader = torch.utils.data.DataLoader( trainset, batch_size= batch_size, shuffle= True, num_workers=2)

#Loding_Validation_data_of_100_classes
testset = torchvision.datasets.ImageFolder("val", transform = transform_test)
testloader = torch.utils.data.DataLoader( testset, batch_size= batch_size, shuffle= False, num_workers=2)
# sizes of train and val images_four image per_training_sub_folder
print(len(trainset), len(testset))  
#Checking_and_inspecting_of_all_subfolders_and_fetching_Names_or_labels_of_classes
import os
import pathlib
root=pathlib.Path(train_path)
classes=sorted([j.name.split('/')[-1] for j in root.iterdir()])
print(classes)

#ReLabelling_of_class_labels_to_avoid_potential_overlap_of_long_strings_in_Train_and_validation_foldes
#Use_Dictionary_construction_method_to_relable_by_switching_to_number_labels_for_clarity_and_ensuring_nooverlab
#Assigning_numerical_labels_to_Training_classes_(folders)

labels=classes
l_dict = {v:k for k, v in enumerate(labels)}
print(l_dict)

#Printing_New_Trainingset_labels_In_Numeric_form
new_labels = [l_dict[x] for x in labels]
print(new_labels)
Repeating_the_process_and_Preparing_New_Validationset_labels_and_cross_checking_1
import os
import pathlib
root=pathlib.Path(test_path)
V_classes=sorted([j.name.split('/')[-1] for j in root.iterdir()])
print(V_classes)
#Repeating_the_process_and_Preparing_New_Validationset_labels_and_cross_checking_1
#Matching of Training labels with Validation labels_0_to_99, A total of 100 classes
V_labels = V_classes
l_dict = {v:k for k, v in enumerate(V_labels)}
V_new_labels = [l_dict[x] for x in V_labels]
print(V_new_labels)

#Image_Showing_and_Checking

def imshow(img, title):
    
    npimg = img.numpy() / 2 + 0.5
    plt.figure(figsize= (batch_size, 1))
    plt.axis('off')
    plt.imshow(np.transpose(npimg, (1, 2, 0)))
    plt.title(title)
    plt.show()
    
def show_batch_images(dataloder):
    
    images, new_labels = next(iter(dataloder))
    img = torchvision.utils.make_grid(images)
    imshow(img, title = [ str(x.item()) for x in new_labels])    
    
#Strategy for getting the shape at each layer for designing CNN layers. 
img, label = trainset[0]
print(img.shape,label)

conv1=nn.Conv2d(3,6,5)
x=conv1(img)
print(x.shape)
pool=nn.MaxPool2d(2,2)
x=pool(x)
print(x.shape)
conv2=nn.Conv2d(6,16,5)
x=conv2(x)
print(x.shape)

#Desining simple CNN architecture for multi-class image classification
class ConvNet(nn.Module):
    def __init__(self, num_classes=100):
        super(ConvNet, self).__init__()
        self.conv1= nn.Conv2d(3,6,5)
        self.pool = nn.MaxPool2d(2,2)
        self.conv2= nn.Conv2d(6,16,5)
        
        self.fc1 = nn.Linear(16*69*69, 120)
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, 100)
    
    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = x.view(-1, 16*69*69)
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return x
        
 #calling the model
model = ConvNet(num_classes).to(device)

#evaluation setup
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)




